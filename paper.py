from binance.client import Client
from binance.exceptions import BinanceAPIException

# Binance Testnet API keys (Replace with your keys securely)
API_KEY = "c69544e2b2f49162c35bb6ff80bafdd50dff9e18587cd478620df6e0d8b073a0"  # Replace with your Testnet API Key
API_SECRET = "09ed7f09d4d16bf233b16786ce26373bcd0ac9fbc7c87730df568a342d3cc730"  # Replace with your Testnet API Secret

# Initialize Binance Client in Testnet mode
client = Client(API_KEY, API_SECRET, testnet=True)

# Function to place order
def place_order(symbol, signal):
    try:
        if signal > 0:
            side = "BUY"  # Long position for positive signal
        elif signal < 0:
            side = "SELL"  # Short position for negative signal
        else:
            print("No action required for signal: 0")
            return

        # Get the precision for the symbol
        exchange_info = client.futures_exchange_info()
        symbol_info = next(s for s in exchange_info['symbols'] if s['symbol'] == symbol)
        step_size = next(f['stepSize'] for f in symbol_info['filters'] if f['filterType'] == 'LOT_SIZE')

        # Calculate the quantity based on the signal
        quantity = 1 # Adjust the factor depending on your needs

        # Round the quantity to the required precision
        precision = len(step_size.split('.')[1]) if '.' in step_size else 0
        quantity = round(quantity, precision)

        # Create the market order
        order = client.futures_create_order(
            symbol=symbol,
            side=side,
            type="MARKET",
            quantity=quantity  # Amount of the asset to buy/sell
        )

        print(f"Order placed: {side} {quantity} {symbol}")
        print(order)

    except BinanceAPIException as e:
        print(f"Error placing order: {e.message}")
    except Exception as e:
        print(f"Unexpected error: {e}")

# Sample signal (can be dynamically generated by your bot)
signal = 0.3  # Example buy signal

print(f"Processing signal: {signal}")
symbol = "ETHUSDT"  # Trading pair
place_order(symbol, signal)

# Check account balance (optional)
balance = client.futures_account_balance()
print("Account balance:", balance)
